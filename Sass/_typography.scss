//------------------------------------\\
    // SETTINGS
//------------------------------------\\

// What would you like your base font-size to be? Define in pixels; the library
// will convert measurements to the most appropriate units (rems or unitless).
$type-base-font-size:      14px !default;
$type-base-line-height:    22px !default;

// Heading sizes
$type-h1-size:             50px !default;
$type-h2-size:             44px !default;
$type-h3-size:             33px !default;
$type-h4-size:             22px !default;
$type-h5-size:             21px !default;
$type-h6-size:             18px !default;

// Would you like indented (rather than spaced) paragraph delimiting?
$type-indented-paragraphs: false !default;

// Would you like to automatically scale your Heading sizes?
// (This can provide a more elegant typographic rhythm)
$type-auto-scale:          false !default;

// Set the ratio by which your type should grow.
// Accepts two numbers, representing a ratio, typically associated with
// music intervals. You may also use floats (1.33).
// Common intervals: Perfect fourth (4,3)[default], Perfect Fifth (3,2),
// Perfect Octave (2,1), Major Third (5,4), Major Sixth (5,3).
// The Golden Ratio is (1.618,1).
$type-ratio:               1.214   !default;

// Would you like to show a baseline grid? This is handy during development.
$type-show-baseline:       false !default;

// Do not modify these variables; they are internal settings upon which the
// library depends.
$stripped-base-font-size:  type-strip-units($type-base-font-size);
$type-magic-number:        $type-base-line-height;
$type-magic-ratio:         $type-base-line-height / $type-base-font-size;
$type-headings:            6,5,4,3,2,1;
$type-modular-scale:       0;


//Checking for floats in $type-ratio
@if length($type-ratio) == 2{
// Making sure we don't have a ratio below 1.
    @if nth($type-ratio,1) < nth($type-ratio,2){
        $type-modular-scale:   nth($type-ratio, 2)/nth($type-ratio, 1);
    }@else{
        $type-modular-scale:   nth($type-ratio, 1)/nth($type-ratio, 2);
    }
} @else {
    $type-modular-scale:   $type-ratio;
}


/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * A lot of elements in type need to share some declarations (mainly for
 * vertical rhythm), so we `@extend` some silent classes.
 */
%type-reset {
    margin:  0;
    padding: 0;
}

%type-vertical-rhythm {
    @extend %type-reset;
    margin-bottom: $type-magic-number;
    margin-bottom: $type-magic-ratio + rem;
}


/*------------------------------------*\
    #BASE
\*------------------------------------*/
/**
 * 1. Set the base element’s `font-size` to the value of your choosing. Set in
 *    ems, assuming a browser default of 16px.
 * 2. Work out the unitless `line-height` for your project based around your
 *    desired `line-height` (defined previously in pixels), and your project’s
 *    base font size.
 */



html {
    font-size: $type-base-font-size / 16px + em; /* [1] */
    line-height: $type-base-line-height / $type-base-font-size; /* [2] */
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;

    // If you have chosen to display a baseline grid, we turn it on here.
    @if $type-show-baseline == true {

        $type-baseline-size: type-strip-units($type-magic-number);

        background-image: url(http://basehold.it/i/#{$type-baseline-size}); /* [3] */
    }

}
body {
    font-size: 1em;
    margin: 0;
}



/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/

@if $type-auto-scale == true {                         /* [1] */
/**
 * 1. If you've chosen to automatically scale your type, we set that up here.
 * 2. Using heading numbers[6-1], we create a loop.
 * 3. Use the current scale number to exponentially scale up our base-font-size.
 * 4. Invert the current value of the loop($i) for an more traditionally ordered
 *    output (h1,h2,h3,h4,h5,h6).
 * 5. Use our new modular values for input into type mixins to generate our
 *    desired, modularly-scaled css.
 */
    @each $i in $type-headings{                         /* [2] */
            $font-size: modular-scale($i);                   /* [3] */
            $current-heading: nth($type-headings,$i);   /* [4] */
                                                             /* [5] */
            h#{$current-heading} {
                @extend %type-vertical-rhythm;
                @include type-font-size($font-size, true);
            };
            $i: $i + 1;
    };

}
@else{

h1 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h1-size);
}

h2 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h2-size);
}

h3 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h3-size);
}

h4 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h4-size);
}

h5 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h5-size);
}

h6 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h6-size);
}
}




/*------------------------------------*\
    #LISTS
\*------------------------------------*/
ul, ol, dd, menu {
    @extend %type-vertical-rhythm;
    @include type-space(margin-left);
}

li > ul,
li > ol {
    margin-bottom: 0;
}





/*------------------------------------*\
    #PARAGRAPHS
\*------------------------------------*/
p {
    @extend %type-vertical-rhythm;

    @if $type-indented-paragraphs == true {

        + p {
            @include type-space(text-indent);
            margin-top: -$type-magic-number;
            margin-top: -$type-magic-ratio + rem;
        }

    }

}

/**
 * Not strictly a paragraph, but probably doesn’t need its own section.
 */
address {
    @extend %type-vertical-rhythm;
}


pre {
    @extend %type-vertical-rhythm;
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * 1. Fix an odd quirk whereby, without this, code blocks are rendered at a
 *    font-size smaller than 1em.
 */
code,
kbd,
pre,
samp {
    font-family: monospace, monospace; /* [1] */
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}




/*------------------------------------*\
    #QUOTES
\*------------------------------------*/
/**
 * 1. Hang the opening quote of the blockquote.
 */
blockquote {
    text-indent: -0.41em; /* [1] */
}

blockquote {
    @extend %type-vertical-rhythm;
    quotes: "“" "”";
    @include type-space(margin-left);

    p {

        &:before {
            content: "“";
            content: open-quote;
        }

        &:after {
            content: "";
            content: no-close-quote;
        }

        &:last-of-type:after {
            content: "”";
            content: close-quote;
        }

    }

}

q   {
    quotes: "‘" "’" "“" "”";

    &:before {
        content: "‘";
        content: open-quote;
    }

    &:after {
        content: "’";
        content: close-quote;
    }

    q:before {
        content: "“";
        content: open-quote;
    }

    q:after{
        content: "”";
        content: close-quote;
    }

    /**
     * If an element opens with an inline quote, let’s hang that.
     */
    &:first-child {
        display: inline-block;
        text-indent: -0.22em;
    }

}
table {
    @extend %type-vertical-rhythm;
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
}

th,
td {
    padding: $type-base-line-height / 2;}

b,strong{
    font-weight: bold;}
dfn {
    font-style: italic;}
small {
    @include type-scale(-1);}
sub,sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;}
sup {
    top: -0.5em;
}
sub {
    bottom: -0.25em;
}
fieldset {
    border: 0;
    margin: 0 2px;
    @include type-scale(padding, -1);
}
