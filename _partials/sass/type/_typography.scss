//------------------------------------
//    $Typography
//------------------------------------

 // CONTENTS
 // INTRODUCTION.........How the type system works.
 // VARIABLES............Your settings.
 // SETUP................Silent classes and functions.
 // BASE.................Additional normalization for HTML and BODY
 // HEADINGS.............Create the headings with modular scale or pre-defined sizes
 // LISTS................Add typographic rhythm principles to lists.
 // PARAGRAPHS...........Paragraph, and paragraph-like elements.
 // QUOTES...............Blockquote styling.
 // TABLES...............Table and table-cell styles.
 // NORMALIZE............Type-specific definitions pulled from normalize.css.


//------------------------------------\\
//    $INTRODUCTION
//------------------------------------\\

// Based on https://github.com/csswizardry/typecsset;
// A small, unopinionated library for creating beautifully set type
// on the web. Typecsset gives perfect vertical rhythm at any configurable font
// size, as well as many other typographical niceties.



//------------------------------------\\
//    $VARIABLES
//------------------------------------\\

//!!!! NOTE: All of the real variables are in /utilities/_variables.scss \\
//!!!! What follows is just for reference. !!!!! \\

// What would you like your base font-size to be? Define in pixels; the library
// will convert measurements to the most appropriate units (rems or unitless).
//$type-base-font-size:      14px !default;
//$type-base-line-height:    22px !default;

// Heading sizes if you'd rather set them yourself (set $type-auto-scale to false).
//$type-h1-size:             50px !default;
//$type-h2-size:             44px !default;
//$type-h3-size:             33px !default;
//$type-h4-size:             22px !default;
//$type-h5-size:             21px !default;
//$type-h6-size:             18px !default;

// Would you like indented (rather than spaced) paragraph delimiting?
//$type-indented-paragraphs: false !default;

// Set the ratio by which your type should grow.
// Accepts two numbers, representing a ratio, typically associated with
// music intervals. You may also use floats (1.33).
// Common intervals: Perfect fourth (4,3)[default], Perfect Fifth (3,2),
// Perfect Octave (2,1), Major Third (5,4), Major Sixth (5,3).
// The Golden Ratio is (1.618,1).
//$type-ratio:               4,3   !default;

// Would you like to show a baseline grid? This is handy during development.
//$type-show-baseline:       false !default;




/*-----------------------------------
    $SETUP
------------------------------------*/

// Just here for reference.
// Real functions live within utilities/_functions.scss

// @mixin typecsset-font-size($font-size, $line-height: true) {
//    font-size: $font-size;
//    font-size: ($font-size / $typecsset-base-font-size) * 1rem;

//    @if $line-height == true {
//        line-height: ceil($font-size / $typecsset-base-line-height) * ($typecsset-base-line-height / $font-size);
//    }
//
// }

// A small, internally-used function to remove the units from a given value.
// @function typecsset-strip-units($number) {
//    @return $number / ($number * 0 + 1);
// }

%type-vertical-rhythm {
    @extend %type-reset;
    margin-bottom: $type-magic-number;
    margin-bottom: $type-magic-ratio + rem;
}



/*-----------------------------------
    $BASE
------------------------------------*/
 html {
   @extend %type-reset;
   @extend %type-family;
   font-size: $type-base-font-size / 16px + em; // [1]
   line-height: $type-base-line-height / $type-base-font-size; // [2]
    -ms-text-size-adjust: 100%;
   -webkit-text-size-adjust: 100%;

// If you have chosen to display a baseline grid, we turn it on here.
   @if $type-show-baseline == true {
        $type-baseline-size: strip-units($type-magic-number);
        background-image: url(http://basehold.it/i/#{$type-baseline-size}); // [3]
    }
    // Makes sticky footers much easier.
    width: 100%;
    height: 100%;
}
body {
   font-size: 1em;
   @extend %type-reset;
}

//Allow a toggle for baseline image
@if $type-show-baseline == true {
    .baseline-off{
        background-image:none;
    }
}



/*------------------------------------
    $HEADINGS
------------------------------------*/
 // 1. If you've chosen to automatically scale your type, we set that up here.
 // 2. Using heading numbers[6-1], we create a loop.
 // 3. Use the current scale number to exponentially scale up our base-font-size.
 // 4. Invert the current value of the loop($i) for an more traditionally ordered
 //    output (h1,h2,h3,h4,h5,h6).
 // 5. Use our new modular values for input into type mixins to generate our
 //    desired, modularly-scaled css.
 // 6. If followed by a paragraph, create a closer larger top margin, but smaller bottom margin.
 // 7. If classed headings, create them by extending everything above.

@if $type-auto-scale == true {  //[1]

    @include headings-scale($type-ratio);

}
@else{

h1 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h1-size);
    @if $type-scale-classes == true{
        .h1{
            @extend h1;
        }
   }
}

h2 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h2-size);
    @if $type-scale-classes == true{
        .h2{
            @extend h2;
        }
   }
}

h3 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h3-size);
    @if $type-scale-classes == true{
        .h3{
            @extend h3;
        }
   }
}

h4 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h4-size);
    @if $type-scale-classes == true{
        .h4{
            @extend h4;
        }
   }
}

h5 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h5-size);
    @if $type-scale-classes == true{
        .h5{
            @extend h5;
        }
   }
}

h6 {
    @extend %type-vertical-rhythm;
    @include type-font-size($type-h6-size);
    @if $type-scale-classes == true{
        .h6{
            @extend h6;
        }
   }
}
}




/*-------------------------------
    $LISTS
-------------------------------*/
ul, ol, dd, menu {
    @extend %type-vertical-rhythm;
    @include type-space(margin-left, 1);
}

li > ul,
li > ol {
    margin-bottom: 0;
}





/*-------------------------------
    $PARAGRAPHS
-------------------------------*/
p {
    @extend %type-vertical-rhythm;

    @if $type-indented-paragraphs == true {

        + p {
            @include type-space(text-indent);
            margin-top: -$type-magic-number;
            margin-top: -$type-magic-ratio + rem;
        }

    }

}

//
// Not strictly a paragraph, but probably doesn’t need its own section.
//
address {
    @extend %type-vertical-rhythm;
}


pre {
    @extend %type-vertical-rhythm;
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}


// 1. Fix an odd quirk whereby, without this, code blocks are rendered at a
//    font-size smaller than 1em.

code,
kbd,
pre,
samp {
    font-family: monospace, monospace; // [1]
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/*Address styling not present in IE 7/8/9, Safari 5, and Chrome.*/

abbr[title] {
    border-bottom: 1px dotted;
}




/*-------------------------------
    $QUOTES
-------------------------------*/
//
// 1. Hang the opening quote of the blockquote.
//
blockquote {
    text-indent: -0.41em; // [1] */
}

blockquote {
    @extend %type-vertical-rhythm;
    quotes: "“" "”";
    @include type-space(margin-left, 1);

    p {

        &:before {
            content: "“";
            content: open-quote;
        }

        &:after {
            content: "";
            content: no-close-quote;
        }

        &:last-of-type:after {
            content: "”";
            content: close-quote;
        }

    }

}

q   {
    quotes: "‘" "’" "“" "”";
    overflow: visible;

    &:before {
        content: "‘";
        content: open-quote;
    }

    &:after {
        content: "’";
        content: close-quote;
    }

    q:before {
        content: "“";
        content: open-quote;
    }

    q:after{
        content: "”";
        content: close-quote;
    }

    //
    // If an element opens with an inline quote, let’s hang that.
    //
    &:first-child {
        display: inline-block;
        text-indent: -0.22em;
    }

}


/*-------------------------------
    $TABLES
-------------------------------*/

table {
    @extend %type-vertical-rhythm;
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
}

th,
td {
    padding: $type-base-line-height / 2;
    text-align: left;
    border: 0;
    border-bottom: 1px solid $function-color;
}


/*-------------------------------*/
/*    $NORMALIZE                 */
/*-------------------------------*/
b,strong{
    font-weight: bold;}
dfn {
    font-style: italic;}
small {
    @include type-scale(font-size,-1);}
sub,sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;}
sup {
    top: -0.5em;
}
sub {
    bottom: -0.25em;
}

