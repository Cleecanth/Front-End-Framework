// Exponent function (for square, cubes, etc.)

@function exponent($base, $exponent){
      $value: $base;
      @if $exponent > 1{
        @for $i from 2 through $exponent{
          $value: $value * $base;
        }
      }
      @if $exponent < 1{
        @for $i from 0 through -$exponent{
          $value: $value / $base;
        }
       }
      @return ($value);
}


// Strip units from a sass value

@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}


// Quickly generate a font-size in rems, with a pixel fallback, based on the
// value we pass into the mixin, e.g.:
//
// h1 {
//     @include type-font-size(24px);
// }
@mixin type-font-size($font-size, $line-height: true) {
    font-size: $font-size;
    font-size: ($font-size / $type-base-font-size) * 1rem;

    @if $line-height == true {
        line-height: ceil($font-size / $type-base-line-height)* $type-base-line-height;
        line-height: ceil($font-size / $type-base-line-height) * ($type-base-line-height) / $font-size;
    }

}

// Space elements by an amount based on your magic number. Pass in the property
// to be indented as a paramater and the number of lines to use as an optional paramater, e.g.:
// pre {
//     @include type-space(padding-left, 1);
// }

@mixin type-space($property, $multiplier: 2) {
    #{$property}: $multiplier * $type-magic-number;
    #{$property}: $multiplier * $type-magic-ratio + rem;
}

//Use this for padding or margin shortcuts. e.g.:
//pre {
//    @include type-space(padding, 1, 2, 1, 0);
// }

@mixin type-space-sc($property, $multiplier-1: 0, $multiplier-2: 0, $multiplier-3: 99, $multiplier-4: 99){
    @if $multiplier-3 == 99{
        $multiplier-3: $multiplier-1;
    }
    @if $multiplier-4 == 99{
        $multiplier-4: $multiplier-2;
    }
    #{$property}: $multiplier-1 * $type-magic-number $multiplier-2 * $type-magic-number $multiplier-3 * $type-magic-number $multiplier-4 * $type-magic-number;
    #{$property}: $multiplier-1 * $type-magic-ratio + rem $multiplier-2 * $type-magic-ratio + rem $multiplier-3 * $type-magic-ratio + rem $multiplier-4 * $type-magic-ratio + rem;
}
// Modular scale function to scale type up or down.
@function modular-scale($i){
    @return exponent($type-modular-scale, $i)*($stripped-base-font-size)*1px;
}

// This mixin can be used externally
// by using @include modular-scale([scale number, property]);.
@mixin type-scale($property: font-size, $i: 1){
    @if $type-auto-scale == false{
        @warn "Please set $type-auto-scale to true or else type-scale is fairly meaningless.";
    }
    @if $property == "font-size"{
        $font-size: modular-scale($i);
        @include type-font-size($font-size);
    }
    @else{
        $scale: modular-scale($i);
        #{$property}: $scale;
        #{$property}: ($scale / $type-base-font-size) * 1rem;
    }
}
